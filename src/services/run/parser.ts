import {
  ContainerInfo,
  ContainerInspect,
  ImageInfo,
  ImageInspect,
  NetworkInfo,
  NetworkInspect,
  VolumeInfo,
  VolumeInspect,
} from "./types.ts";

export const networks = {
  info: (data: Record<string, any>): NetworkInfo => ({
    Id: data.ID,
    Name: data.Name,
    Scope: data.Scope,
    Driver: data.Driver,
    IPv6: data.IPv6 === "true",
    Internal: data.Internal === "true",
    Created: new Date(data.CreatedAt).toISOString(),
  }),
  inspect: (data: Record<string, any>): NetworkInspect => ({
    Id: data.Id,
    Name: data.Name,
    Created: new Date(data.Created).toISOString(),
    Scope: data.Scope,
    Driver: data.Driver,
    EnableIPv6: data.EnableIPv6,
    IPAM: data.IPAM,
    Internal: data.Internal,
    Attachable: data.Attachable,
    Ingress: data.Ingress,
    ConfigFrom: data.ConfigFrom,
    ConfigOnly: data.ConfigOnly,
    Containers: data.Containers,
    Options: data.Options,
    Labels: data.Labels,
  }),
};

export const volumes = {
  info: (data: Record<string, any>): VolumeInfo => ({
    Name: data.Name,
    Scope: data.Scope,
    Driver: data.Driver,
    Size: data.Size,
    Links: data.Links,
    Mountpoint: data.Mountpoint,
  }),
  inspect: (data: Record<string, any>): VolumeInspect => ({
    Name: data.Name,
    Scope: data.Scope,
    Driver: data.Driver,
    Created: new Date(data.CreatedAt).toISOString(),
    Mountpoint: data.Mountpoint,
    Labels: data.Labels,
    Options: data.Options,
  }),
};

export const images = {
  info: (data: Record<string, any>): ImageInfo => ({
    Id: data.ID,
    Repository: data.Repository,
    Tag: data.Tag,
    Digest: data.Digest,
    Created: new Date(data.CreatedAt).toISOString(),
    CreatedSince: data.CreatedSince,
    Size: data.Size,
    VirtualSize: data.VirtualSize,
  }),
  inspect: (data: Record<string, any>): ImageInspect => ({
    Id: data.Id,
    RepoTags: data.RepoTags,
    RepoDigests: data.RepoDigests,
    Parent: data.Parent,
    Comment: data.Comment,
    Created: new Date(data.Created).toISOString(),
    Container: data.Container,
    ContainerConfig: data.ContainerConfig,
    DockerVersion: data.DockerVersion,
    Author: data.Author,
    Config: data.Config,
    Architecture: data.Architecture,
    Os: data.Os,
    Size: data.Size,
    VirtualSize: data.VirtualSize,
    GraphDriver: data.GraphDriver,
    RootFS: data.RootFS,
    Metadata: data.Metadata,
  }),
};

export const containers = {
  // prettier-ignore
  info: (data: Record<string, any>): ContainerInfo => ({
    Id: data.ID,
    Name: data.Names,
    Image: data.Image,
    State: data.State,
    Status: data.Status,
    Size: data.Size,
    Created: new Date(data.CreatedAt).toISOString(),
    Ports: data.Ports,
    Mounts: data.Mounts,
    Labels: data.Labels,
    Networks: data.Networks
  }),
  inspect: (data: Record<string, any>): ContainerInspect => ({
    Id: data.Id,
    Created: new Date(data.Created).toISOString(),
    Path: data.Path,
    Args: data.Args,
    State: data.State,
    Image: data.Image,
    ResolvConfPath: data.ResolvConfPath,
    HostnamePath: data.HostnamePath,
    HostsPath: data.HostsPath,
    LogPath: data.LogPath,
    Name: data.Name.substring(1),
    RestartCount: data.RestartCount,
    Driver: data.Driver,
    Platform: data.Platform,
    MountLabel: data.MountLabel,
    ProcessLabel: data.ProcessLabel,
    AppArmorProfile: data.AppArmorProfile,
    ExecIDs: data.ExecIDs,
    HostConfig: data.HostConfig,
    GraphDriver: data.GraphDriver,
    Mounts: data.Mounts,
    Config: data.Config,
    NetworkSettings: data.NetworkSettings,
  }),
};
